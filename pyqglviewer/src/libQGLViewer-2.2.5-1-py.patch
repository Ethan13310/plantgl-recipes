Only in libQGLViewer-2.2.5-1-py/QGLViewer: QGLViewer_resource.rc
diff -abur libQGLViewer-2.2.5-1/QGLViewer/constraint.cpp libQGLViewer-2.2.5-1-py/QGLViewer/constraint.cpp
--- libQGLViewer-2.2.5-1/QGLViewer/constraint.cpp	2007-04-01 21:20:22.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/QGLViewer/constraint.cpp	2007-04-24 10:53:00.000000000 +0200
@@ -121,7 +121,7 @@
 /*! Depending on translationConstraintType(), constrain \p translation to be along an axis or
   limited to a plane defined in the Frame local coordinate system by
   translationConstraintDirection(). */
-void LocalConstraint::constrainTranslation(Vec& translation, Frame* const frame)
+void LocalConstraint::constrainTranslation(Vec& translation, const Frame* frame)
 {
   Vec proj;
   switch (translationConstraintType())
@@ -145,7 +145,7 @@
 /*! When rotationConstraintType() is AxisPlaneConstraint::AXIS, constrain \p rotation to be a rotation
   around an axis whose direction is defined in the Frame local coordinate system by
   rotationConstraintDirection(). */
-void LocalConstraint::constrainRotation(Quaternion& rotation, Frame* const)
+void LocalConstraint::constrainRotation(Quaternion& rotation, const Frame*)
 {
   switch (rotationConstraintType())
     {
@@ -174,7 +174,7 @@
 /*! Depending on translationConstraintType(), constrain \p translation to be along an axis or
   limited to a plane defined in the world coordinate system by
   translationConstraintDirection(). */
-void WorldConstraint::constrainTranslation(Vec& translation, Frame* const frame)
+void WorldConstraint::constrainTranslation(Vec& translation, const Frame* frame)
 {
   Vec proj;
   switch (translationConstraintType())
@@ -208,7 +208,7 @@
 /*! When rotationConstraintType() is AxisPlaneConstraint::AXIS, constrain \p rotation to be a rotation
   around an axis whose direction is defined in the world coordinate system by
   rotationConstraintDirection(). */
-void WorldConstraint::constrainRotation(Quaternion& rotation, Frame* const frame)
+void WorldConstraint::constrainRotation(Quaternion& rotation, const Frame* frame)
 {
   switch (rotationConstraintType())
     {
@@ -236,14 +236,14 @@
 
 /*! Creates a CameraConstraint, whose constrained directions are defined in the \p camera coordinate
   system. */
-CameraConstraint::CameraConstraint(const Camera* const camera)
+CameraConstraint::CameraConstraint(const Camera*  camera)
   : AxisPlaneConstraint(), camera_(camera)
 {}
 
 /*! Depending on translationConstraintType(), constrain \p translation to be along an axis or
   limited to a plane defined in the camera() coordinate system by
   translationConstraintDirection(). */
-void CameraConstraint::constrainTranslation(Vec& translation, Frame* const frame)
+void CameraConstraint::constrainTranslation(Vec& translation, const Frame* frame)
 {
   Vec proj;
   switch (translationConstraintType())
@@ -271,7 +271,7 @@
 /*! When rotationConstraintType() is AxisPlaneConstraint::AXIS, constrain \p rotation to be a rotation
   around an axis whose direction is defined in the camera() coordinate system by
   rotationConstraintDirection(). */
-void CameraConstraint::constrainRotation(Quaternion& rotation, Frame* const frame)
+void CameraConstraint::constrainRotation(Quaternion& rotation, const Frame* frame)
 {
   switch (rotationConstraintType())
     {
diff -abur libQGLViewer-2.2.5-1/QGLViewer/constraint.h libQGLViewer-2.2.5-1-py/QGLViewer/constraint.h
--- libQGLViewer-2.2.5-1/QGLViewer/constraint.h	2007-04-01 21:20:20.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/QGLViewer/constraint.h	2007-04-23 18:01:28.000000000 +0200
@@ -133,7 +133,7 @@
 
     \p translation is expressed in local frame coordinate system. Use Frame::inverseTransformOf() to
     express it in the world coordinate system if needed. */
-    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };
+    virtual void constrainTranslation(Vec& translation, const Frame* frame) { Q_UNUSED(translation); Q_UNUSED(frame); };
     /*! Filters the rotation applied to the \p frame. This default implementation is empty (no
       filtering).
 
@@ -142,7 +142,7 @@
 
     Use Frame::inverseTransformOf() on the \p rotation Quaternion::axis() to express \p rotation in
     the world coordinate system if needed. */
-    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };
+    virtual void constrainRotation(Quaternion& rotation, const Frame* frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };
   };
 
   /*!
@@ -212,7 +212,7 @@
     /*! @name Translation constraint */
     //@{
     /*! Overloading of Constraint::constrainTranslation(). Empty */
-    virtual void constrainTranslation(Vec& translation, Frame* const frame) { Q_UNUSED(translation); Q_UNUSED(frame); };
+    virtual void constrainTranslation(Vec& translation, const Frame* frame) { Q_UNUSED(translation); Q_UNUSED(frame); };
 
     void setTranslationConstraint(Type type, const Vec& direction);
     /*! Sets the Type() of the translationConstraintType(). Default is AxisPlaneConstraint::FREE. */
@@ -244,7 +244,7 @@
     /*! @name Rotation constraint */
     //@{
     /*! Overloading of Constraint::constrainRotation(). Empty. */
-    virtual void constrainRotation(Quaternion& rotation, Frame* const frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };
+    virtual void constrainRotation(Quaternion& rotation, const Frame* frame) { Q_UNUSED(rotation); Q_UNUSED(frame); };
 
     void setRotationConstraint(Type type, const Vec& direction);
     void setRotationConstraintType(Type type);
@@ -285,8 +285,8 @@
     /*! Virtual destructor. Empty. */
     virtual ~LocalConstraint() {};
 
-    virtual void constrainTranslation(Vec&     translation, Frame* const frame);
-    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);
+    virtual void constrainTranslation(Vec&     translation, const Frame* frame);
+    virtual void constrainRotation   (Quaternion& rotation, const Frame* frame);
   };
 
 
@@ -305,8 +305,8 @@
     /*! Virtual destructor. Empty. */
     virtual ~WorldConstraint() {};
 
-    virtual void constrainTranslation(Vec&     translation, Frame* const frame);
-    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);
+    virtual void constrainTranslation(Vec&     translation, const Frame* frame);
+    virtual void constrainRotation   (Quaternion& rotation, const Frame* frame);
   };
 
 
@@ -326,8 +326,8 @@
     /*! Virtual destructor. Empty. */
     virtual ~CameraConstraint() {};
 
-    virtual void constrainTranslation(Vec&     translation, Frame* const frame);
-    virtual void constrainRotation   (Quaternion& rotation, Frame* const frame);
+    virtual void constrainTranslation(Vec&     translation, const Frame* frame);
+    virtual void constrainRotation   (Quaternion& rotation, const Frame* frame);
 
     /*! Returns the associated Camera. Set using the CameraConstraint constructor. */
     const Camera* camera() const { return camera_; };
diff -abur libQGLViewer-2.2.5-1/QGLViewer/manipulatedCameraFrame.h libQGLViewer-2.2.5-1-py/QGLViewer/manipulatedCameraFrame.h
--- libQGLViewer-2.2.5-1/QGLViewer/manipulatedCameraFrame.h	2007-04-01 21:20:24.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/QGLViewer/manipulatedCameraFrame.h	2007-04-24 10:32:24.000000000 +0200
@@ -122,9 +122,9 @@
     /*! @name Mouse event handlers */
     //@{
   protected:
-    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera);
-    virtual void mouseMoveEvent   (QMouseEvent* const event, Camera* const camera);
-    virtual void wheelEvent       (QWheelEvent* const event, Camera* const camera);
+    virtual void mouseReleaseEvent(QMouseEvent* event, Camera* camera);
+    virtual void mouseMoveEvent   (QMouseEvent* event, Camera* camera);
+    virtual void wheelEvent       (QWheelEvent* event, Camera* camera);
     //@}
 
     /*! @name Spinning */
@@ -151,8 +151,8 @@
 
   private:
     void updateFlyUpVector();
-    Quaternion turnQuaternion(int x, const Camera* const camera);
-    Quaternion pitchYawQuaternion(int x, int y, const Camera* const camera);
+    Quaternion turnQuaternion(int x, const Camera* camera);
+    Quaternion pitchYawQuaternion(int x, int y, const Camera* camera);
 
   private:
     // Fly mode data
diff -abur libQGLViewer-2.2.5-1/QGLViewer/manipulatedFrame.cpp libQGLViewer-2.2.5-1-py/QGLViewer/manipulatedFrame.cpp
--- libQGLViewer-2.2.5-1/QGLViewer/manipulatedFrame.cpp	2007-04-01 21:20:20.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/QGLViewer/manipulatedFrame.cpp	2007-04-24 10:54:22.000000000 +0200
@@ -85,7 +85,7 @@
 Camera::projectedCoordinatesOf() position().
 
 See the <a href="../examples/mouseGrabber.html">mouseGrabber example</a> for an illustration. */
-void ManipulatedFrame::checkIfGrabsMouse(int x, int y, const Camera* const camera)
+void ManipulatedFrame::checkIfGrabsMouse(int x, int y, const Camera* camera)
 {
   const int thresold = 10;
   const Vec proj = camera->projectedCoordinatesOf(position());
@@ -231,7 +231,7 @@
 
 /*! Updates mouse speed, measured in pixels/milliseconds. Should be called by any method which wants to
 use mouse speed. Currently used to trigger spinning in mouseReleaseEvent(). */
-void ManipulatedFrame::computeMouseSpeed(const QMouseEvent* const e)
+void ManipulatedFrame::computeMouseSpeed(const QMouseEvent* e)
 {
   const QPoint delta = (e->pos() - prevPos_);
   const float dist = sqrt(static_cast<float>(delta.x()*delta.x() + delta.y()*delta.y()));
@@ -245,7 +245,7 @@
 
 /*! Return 1 if mouse motion was started horizontally and -1 if it was more vertical. Returns 0 if
 this could not be determined yet (perfect diagonal motion, rare). */
-int ManipulatedFrame::mouseOriginalDirection(const QMouseEvent* const e)
+int ManipulatedFrame::mouseOriginalDirection(const QMouseEvent* e)
 {
   static bool horiz = true; // Two simultaneous manipulatedFrame require two mice !
 
@@ -272,7 +272,7 @@
 
 The mouse behavior depends on which button is pressed. See the <a href="../mouse.html">QGLViewer
 mouse page</a> for details. */
-void ManipulatedFrame::mousePressEvent(QMouseEvent* const event, Camera* const camera)
+void ManipulatedFrame::mousePressEvent(QMouseEvent* event, Camera* camera)
 {
   Q_UNUSED(camera);
 
@@ -298,7 +298,7 @@
 Camera::screenWidth(), Camera::screenHeight(), Camera::fieldOfView()).
 
 Emits the manipulated() signal. */
-void ManipulatedFrame::mouseMoveEvent(QMouseEvent* const event, Camera* const camera)
+void ManipulatedFrame::mouseMoveEvent(QMouseEvent* event, Camera* camera)
 {
   switch (action_)
     {
@@ -427,7 +427,7 @@
 If the action was a QGLViewer::ROTATE QGLViewer::MouseAction, a continuous spinning is possible if
 the speed of the mouse cursor is larger than spinningSensitivity() when the button is released.
 Press the rotate button again to stop spinning. See startSpinning() and isSpinning(). */
-void ManipulatedFrame::mouseReleaseEvent(QMouseEvent* const event, Camera* const camera)
+void ManipulatedFrame::mouseReleaseEvent(QMouseEvent* event, Camera* camera)
 {
   Q_UNUSED(event);
   Q_UNUSED(camera);
@@ -448,7 +448,7 @@
 Left button double click aligns the ManipulatedFrame with the \p camera axis (see alignWithFrame()
  and QGLViewer::ALIGN_FRAME). Right button projects the ManipulatedFrame on the \p camera view
  direction. */
-void ManipulatedFrame::mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera)
+void ManipulatedFrame::mouseDoubleClickEvent(QMouseEvent* event, Camera* camera)
 {
 #if QT_VERSION >= 0x040000
   if (event->modifiers() == Qt::NoModifier)
@@ -467,7 +467,7 @@
 
 Using the wheel is equivalent to a QGLViewer::ZOOM QGLViewer::MouseAction. See
  QGLViewer::setWheelBinding() and setWheelSensitivity(). */
-void ManipulatedFrame::wheelEvent(QWheelEvent* const event, Camera* const camera)
+void ManipulatedFrame::wheelEvent(QWheelEvent* event, Camera* camera)
 {
   //#CONNECTION# QGLViewer::setWheelBinding
   if (action_ == QGLViewer::ZOOM)
@@ -511,7 +511,7 @@
 #ifndef DOXYGEN
 /*! Returns a quaternion computed according to the mouse motion. Mouse positions are projected on a
 deformed ball, centered on (\p cx,\p cy). */
-Quaternion ManipulatedFrame::deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* const camera)
+Quaternion ManipulatedFrame::deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* camera)
 {
   // Points on the deformed ball
   float px = rotationSensitivity() * (prevPos_.x()  - cx) / camera->screenWidth();
diff -abur libQGLViewer-2.2.5-1/QGLViewer/manipulatedFrame.h libQGLViewer-2.2.5-1-py/QGLViewer/manipulatedFrame.h
--- libQGLViewer-2.2.5-1/QGLViewer/manipulatedFrame.h	2007-04-01 21:20:24.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/QGLViewer/manipulatedFrame.h	2007-04-24 10:31:48.000000000 +0200
@@ -236,11 +236,11 @@
     /*! @name Mouse event handlers */
     //@{
   protected:
-    virtual void mousePressEvent      (QMouseEvent* const event, Camera* const camera);
-    virtual void mouseMoveEvent       (QMouseEvent* const event, Camera* const camera);
-    virtual void mouseReleaseEvent    (QMouseEvent* const event, Camera* const camera);
-    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera);
-    virtual void wheelEvent           (QWheelEvent* const event, Camera* const camera);
+    virtual void mousePressEvent      (QMouseEvent* event, Camera* camera);
+    virtual void mouseMoveEvent       (QMouseEvent* event, Camera* camera);
+    virtual void mouseReleaseEvent    (QMouseEvent* event, Camera* camera);
+    virtual void mouseDoubleClickEvent(QMouseEvent* event, Camera* camera);
+    virtual void wheelEvent           (QWheelEvent* event, Camera* camera);
     //@}
 
   public:
@@ -252,7 +252,7 @@
     /*! @name MouseGrabber implementation */
     //@{
   public:
-    virtual void checkIfGrabsMouse(int x, int y, const Camera* const camera);
+    virtual void checkIfGrabsMouse(int x, int y, const Camera* camera);
     //@}
 
     /*! @name XML representation */
@@ -265,14 +265,14 @@
 
 #ifndef DOXYGEN
   protected:
-    Quaternion deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* const camera);
+    Quaternion deformedBallQuaternion(int x, int y, float cx, float cy, const Camera* camera);
 
     int action_; // Should be a QGLViewer::MouseAction, but include loop
     Constraint* previousConstraint_; // When manipulation is without Contraint.
 
     virtual void startAction(int ma, bool withConstraint=true); // int is really a QGLViewer::MouseAction
-    void computeMouseSpeed(const QMouseEvent* const e);
-    int mouseOriginalDirection(const QMouseEvent* const e);
+    void computeMouseSpeed(const QMouseEvent* e);
+    int mouseOriginalDirection(const QMouseEvent* e);
 
     // Previous mouse position (used for incremental updates) and mouse press position.
     QPoint prevPos_, pressPos_;
diff -abur libQGLViewer-2.2.5-1/QGLViewer/mouseGrabber.h libQGLViewer-2.2.5-1-py/QGLViewer/mouseGrabber.h
--- libQGLViewer-2.2.5-1/QGLViewer/mouseGrabber.h	2007-04-01 21:20:20.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/QGLViewer/mouseGrabber.h	2007-04-27 11:53:24.000000000 +0200
@@ -177,7 +177,7 @@
 
     See examples in the <a href="#_details">detailed description</a> section and in the <a
     href="../examples/mouseGrabber.html">mouseGrabber example</a>. */
-    virtual void checkIfGrabsMouse(int x, int y, const Camera* const camera) = 0;
+    virtual void checkIfGrabsMouse(int x, int y, const Camera* camera) = 0;
 
     /*! Returns \c true when the MouseGrabber grabs the QGLViewer's mouse events.
 
@@ -246,23 +246,23 @@
     href="../examples/mouseGrabber.html">mouseGrabber example</a> for examples.
 
     See the \c QGLWidget::mousePressEvent() and the \c QMouseEvent documentations for details. */
-    virtual void mousePressEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };
+    virtual void mousePressEvent(QMouseEvent* event, Camera* camera) { Q_UNUSED(event) Q_UNUSED(camera) };
     /*! Callback method called when the MouseGrabber grabsMouse() and a mouse button is double clicked.
 
     See the \c QGLWidget::mouseDoubleClickEvent() and the \c QMouseEvent documentations for details. */
-    virtual void mouseDoubleClickEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };
+    virtual void mouseDoubleClickEvent(QMouseEvent* event, Camera*  camera) { Q_UNUSED(event) Q_UNUSED(camera) };
     /*! Mouse release event callback method. See mousePressEvent(). */
-    virtual void mouseReleaseEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };
+    virtual void mouseReleaseEvent(QMouseEvent* event, Camera* camera) { Q_UNUSED(event) Q_UNUSED(camera) };
     /*! Callback method called when the MouseGrabber grabsMouse() and the mouse is moved while a
       button is pressed.
 
     This method will typically update the state of the MouseGrabber from the mouse displacement. See
     the mousePressEvent() documentation for details. */
-    virtual void mouseMoveEvent(QMouseEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };
+    virtual void mouseMoveEvent(QMouseEvent* event, Camera* camera) { Q_UNUSED(event) Q_UNUSED(camera) };
     /*! Callback method called when the MouseGrabber grabsMouse() and the mouse wheel is used.
 
     See the \c QGLWidget::wheelEvent() and the \c QWheelEvent documentations for details. */
-    virtual void wheelEvent(QWheelEvent* const event, Camera* const camera) { Q_UNUSED(event) Q_UNUSED(camera) };
+    virtual void wheelEvent(QWheelEvent* event, Camera* camera) { Q_UNUSED(event) Q_UNUSED(camera) };
     //@}
 
   private:
diff -abur libQGLViewer-2.2.5-1/examples/mouseGrabber/mouseGrabber.cpp libQGLViewer-2.2.5-1-py/examples/mouseGrabber/mouseGrabber.cpp
--- libQGLViewer-2.2.5-1/examples/mouseGrabber/mouseGrabber.cpp	2007-04-01 21:20:22.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/examples/mouseGrabber/mouseGrabber.cpp	2007-05-02 10:28:02.000000000 +0200
@@ -28,7 +28,7 @@
 using namespace qglviewer;
 using namespace std;
 
-void CameraPathPlayer::checkIfGrabsMouse(int x, int y, const Camera* const)
+void CameraPathPlayer::checkIfGrabsMouse(int x, int y, const Camera* )
 {
   // Rectangular activation array - May have to be tune depending on your default font size
   setGrabsMouse((x < 80) && (y<yPos()) && ((yPos()-y) < 16));
diff -abur libQGLViewer-2.2.5-1/examples/mouseGrabber/mouseGrabber.h libQGLViewer-2.2.5-1-py/examples/mouseGrabber/mouseGrabber.h
--- libQGLViewer-2.2.5-1/examples/mouseGrabber/mouseGrabber.h	2007-04-01 21:20:22.000000000 +0200
+++ libQGLViewer-2.2.5-1-py/examples/mouseGrabber/mouseGrabber.h	2007-05-02 10:29:32.000000000 +0200
@@ -29,11 +29,11 @@
 {
 public:
   CameraPathPlayer(int nb) : pathNb(nb) {};
-  void checkIfGrabsMouse(int x, int y, const qglviewer::Camera* const camera);
+  void checkIfGrabsMouse(int x, int y, const qglviewer::Camera* camera);
   int yPos() { return 25*pathNb; };
 
 protected:
-  void mousePressEvent(QMouseEvent* const, qglviewer::Camera* const camera) { camera->playPath(pathNb); };
+  void mousePressEvent(QMouseEvent*, qglviewer::Camera* camera) { camera->playPath(pathNb); };
 
 private:
   int pathNb;
